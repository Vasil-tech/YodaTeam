{"ast":null,"code":"let session = []; //let rotationStatus;\n\nimport threeLogic from '../scripts/Three/threeLogic.js';\nimport * as THREE from 'three';\nimport OrbitControl from 'three-orbitcontrols';\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false,\n      renderNum: 0\n    };\n  },\n\n  methods: {},\n  mounted: function () {\n    start3d(THREE);\n  },\n  created: function () {\n    this.emitter.on(\"Rendering\", data => {\n      this.renderNum = data.Num;\n    });\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue), this.color = color;\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      start3d(THREE, this.color, this.orbValue = orbValue);\n    });\n    this.emitter.on(\"RotateOn\", data => {\n      start3d(THREE, this.color, this.orbValue, data);\n    });\n    this.emitter.on(\"FullScreenCanvas\", data => {\n      start3d(THREE, this.color, this.orbValue, data, true);\n    });\n  }\n};\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate, fullScreen = false) {\n  try {\n    console.log(orbCont, this.renderNum);\n\n    if (this.renderNum > 0) {\n      session[this.renderNum] = new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen);\n    } else {\n      console.log(\"suck\");\n    } // if(orbCont){\n    //     rotationStatus = true;\n    //     session[0] = new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen)\n    //     //console.log(session[0].Camera)\n    // }\n    // else{\n    //     if(rotationStatus){\n    //         console.log(session[0].rend.controls.position)\n    //     }\n    //         session[0] = new threeLogic(THREE, color, false, autoRotate, fullScreen)\n    //     }\n\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,IAAIA,OAAM,GAAI,EAAd,C,CACA;;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE,KAFR;AAGFC,eAAS,EAAC;AAHR,KAAN;AAKH,GAPU;;AAQXC,SAAO,EAAC,EARG;AAWXC,SAAO,EAAE,YAAU;AACfC,WAAO,CAACR,KAAD,CAAP;AACH,GAbU;AAcXS,SAAO,EAAE,YAAU;AACf,SAAKC,OAAL,CAAaC,EAAb,CAAgB,WAAhB,EAA6BT,IAAI,IAAE;AACnC,WAAKG,SAAL,GAAiBH,IAAI,CAACU,GAAtB;AACC,KAFD;AAGA,SAAKF,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCR,KAAI,IAAK;AAC7CK,aAAO,CAACR,KAAD,EAAQG,KAAR,EAAe,KAAKC,QAApB,CAAP,EAAsC,KAAKD,KAAL,GAAYA,KAAlD;AACH,KAFD;AAGA,SAAKO,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCP,QAAO,IAAI;AAC7CI,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAL,GAAgBA,QAApC,CAAP;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BT,IAAI,IAAG;AAC/BM,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,CAAP;AACH,KAFD;AAGA,SAAKQ,OAAL,CAAaC,EAAb,CAAgB,kBAAhB,EAAoCT,IAAI,IAAE;AACtCM,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,EAAyC,IAAzC,CAAP;AACH,KAFD;AAGJ;AA9BW,CAAf;;AAiCA,SAASM,OAAT,CAAiBR,KAAjB,EAAwBG,KAAI,GAAI,OAAhC,EAAyCU,OAAzC,EAAkDC,UAAlD,EAA8DC,UAAU,GAAC,KAAzE,EAA+E;AAC3E,MAAG;AACCC,WAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAqB,KAAKR,SAA1B;;AACA,QAAG,KAAKA,SAAL,GAAe,CAAlB,EAAoB;AAChBP,aAAO,CAAC,KAAKO,SAAN,CAAP,GAAwB,IAAIN,UAAJ,CAAeC,KAAf,EAAsBG,KAAtB,EAA6BF,YAA7B,EAA2Ca,UAA3C,EAAuDC,UAAvD,CAAxB;AACJ,KAFA,MAGI;AACAC,aAAO,CAACC,GAAR,CAAY,MAAZ;AACJ,KAPD,CAQC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,GAnBJ,CAoBA,OAAMC,CAAN,EAAQ;AACJ,SAAKR,OAAL,CAAaS,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AACJ;AACJ","names":["session","threeLogic","THREE","OrbitControl","data","color","orbValue","renderNum","methods","mounted","start3d","created","emitter","on","Num","orbCont","autoRotate","fullScreen","console","log","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nlet session = [];\n//let rotationStatus;\nimport threeLogic from '../scripts/Three/threeLogic.js'\nimport * as THREE from 'three'\nimport OrbitControl from 'three-orbitcontrols'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n            renderNum:0,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        start3d(THREE)\n    },\n    created: function(){\n        this.emitter.on(\"Rendering\", data=>{\n        this.renderNum = data.Num;\n        })\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue), this.color= color\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            start3d(THREE, this.color, this.orbValue = orbValue)\n        })\n        this.emitter.on(\"RotateOn\", data=> {\n            start3d(THREE, this.color, this.orbValue, data)\n        })\n        this.emitter.on(\"FullScreenCanvas\", data=>{\n            start3d(THREE, this.color, this.orbValue, data, true)\n        })\n    }\n}\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate, fullScreen=false){\n    try{\n        console.log(orbCont, this.renderNum)\n        if(this.renderNum>0){\n            session[this.renderNum]=new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen)\n        }\n        else{\n            console.log(\"suck\")\n        }\n        // if(orbCont){\n        //     rotationStatus = true;\n        //     session[0] = new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen)\n        //     //console.log(session[0].Camera)\n        // }\n        // else{\n        //     if(rotationStatus){\n        //         console.log(session[0].rend.controls.position)\n        //     }\n        //         session[0] = new threeLogic(THREE, color, false, autoRotate, fullScreen)\n        //     }\n        }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n    }\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}