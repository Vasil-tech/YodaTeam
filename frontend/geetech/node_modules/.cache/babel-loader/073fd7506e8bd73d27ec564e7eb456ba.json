{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nlet camera, controls, scene, renderer;\n\nfunction animate() {\n  window.requestAnimationFrame(this.animate());\n  controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n\n  this.render(scene, camera);\n}\n\nexport default class {\n  constructor(canvas, width, height, THREE, color, OrbitControl) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      this.draw(canvas, width, height, THREE, color, OrbitControl);\n      animate();\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  render(scene, camera) {\n    this.renderer.render(scene, camera);\n  }\n\n  draw(canvas, width, height, THREE, color, OrbitControl) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      if (OrbitControl != false) {\n        try {\n          controls = new OrbitControl(camera, canvas);\n          controls.target.set(0, 0, 0);\n          controls.update();\n          scene.add(Loader(THREE));\n          scene.add(light);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } else {\n        try {\n          scene.add(Loader(THREE));\n          scene.add(light);\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_2', e, 'canvas');\n        }\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  } // Controls(camera, canvas, OrbitControl){\n  //     return controls\n  // }\n\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","camera","controls","scene","renderer","animate","window","requestAnimationFrame","update","render","constructor","canvas","width","height","THREE","color","OrbitControl","setCanvasSize","draw","e","Renderer","Scene","Camera","light","Light","target","set","add","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nlet camera, controls, scene, renderer;\n\nfunction animate(){\n    window.requestAnimationFrame( this.animate() );\n    controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n    this.render(scene, camera);\n}\nexport default class{\n    constructor(canvas, width, height, THREE, color, OrbitControl) {\n        if(this.setCanvasSize(canvas, width, height)){\n            this.draw(canvas, width, height, THREE, color, OrbitControl);\n            animate();\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n    render(scene, camera){\n        this.renderer.render(scene, camera)\n    }\n    draw(canvas, width, height, THREE, color, OrbitControl){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            if(OrbitControl != false){\n                try{\n                    controls = new OrbitControl(camera, canvas)\n                    controls.target.set(0, 0, 0);\n                    controls.update();\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            else{\n                try{\n\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    renderer.render(scene, camera);\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_2', e, 'canvas');\n                }\n            }\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    // Controls(camera, canvas, OrbitControl){\n        \n    //     return controls\n    // }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}