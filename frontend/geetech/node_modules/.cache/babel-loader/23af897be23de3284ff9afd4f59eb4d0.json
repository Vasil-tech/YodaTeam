{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nexport default class {\n  constructor(canvas, width, height, THREE) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      this.draw(canvas, width, height, THREE);\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      console.log(width, height);\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  draw(canvas, width, height, THREE) {\n    try {\n      let renderer = this.Renderer(canvas, THREE);\n      let scene = this.Scene(THREE);\n      let camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      try {\n        scene.add(Loader(THREE));\n        scene.add(light);\n        renderer.render(scene, camera);\n      } catch (e) {\n        errorHandler('Rendering', 'draw_3', e, 'canvas');\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color('black');\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","constructor","canvas","width","height","THREE","setCanvasSize","draw","console","log","e","renderer","Renderer","scene","Scene","camera","Camera","light","Light","add","render","AmbientLight","PerspectiveCamera","position","set","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nexport default class{\n    constructor(canvas, width, height, THREE) {\n        if(this.setCanvasSize(canvas, width, height)){\n            this.draw(canvas, width, height, THREE);\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            console.log(width, height)\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    draw(canvas, width, height, THREE){\n        try{\n            let renderer = this.Renderer(canvas, THREE);\n            let scene = this.Scene(THREE);\n            let camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            \n            try{\n                scene.add(Loader(THREE));\n                scene.add(light)\n                renderer.render(scene, camera);\n            }\n            catch(e){\n                errorHandler('Rendering', 'draw_3', e, 'canvas');\n            }\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color('black');\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}