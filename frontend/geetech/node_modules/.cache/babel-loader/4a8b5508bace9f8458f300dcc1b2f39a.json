{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nexport default class {\n  constructor(canvas, width, height, THREE, color, OrbitControl) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      this.draw(canvas, width, height, THREE, color, OrbitControl);\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  draw(canvas, width, height, THREE, color, OrbitControl) {\n    console.log(\"cont add\");\n    scene.add(Loader(THREE));\n    scene.add(light);\n    const controls = new OrbitControl(camera, canvas);\n\n    try {\n      let renderer = this.Renderer(canvas, THREE);\n      let scene = this.Scene(THREE, color);\n      let camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      if (OrbitControl != false) {\n        try {\n          controls.target.set(0, 0, 0);\n          controls.update();\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } else {\n        try {\n          scene.add(Loader(THREE));\n          scene.add(light);\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_2', e, 'canvas');\n        }\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","constructor","canvas","width","height","THREE","color","OrbitControl","setCanvasSize","draw","e","console","log","scene","add","light","controls","camera","renderer","Renderer","Scene","Camera","Light","target","set","update","render","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nexport default class{\n    constructor(canvas, width, height, THREE, color, OrbitControl) {\n        if(this.setCanvasSize(canvas, width, height)){\n            this.draw(canvas, width, height, THREE, color, OrbitControl);\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    draw(canvas, width, height, THREE, color, OrbitControl){\n        console.log(\"cont add\")\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    const controls = new OrbitControl(camera, canvas)\n        try{\n            \n            let renderer = this.Renderer(canvas, THREE);\n            let scene = this.Scene(THREE, color);\n            let camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            \n            if(OrbitControl != false){\n                try{\n                    \n                    controls.target.set(0, 0, 0);\n                    controls.update();\n                    renderer.render(scene, camera);\n                    \n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            else{\n                try{\n\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    renderer.render(scene, camera);\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_2', e, 'canvas');\n                }\n            }\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}