{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"SceneParamRoot\"\n};\nconst _hoisted_2 = {\n  class: \"backColor\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Смена цвета фона сцены\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = {\n  class: \"colorBar\"\n};\nconst _hoisted_5 = {\n  class: \"orbControl\"\n};\nconst _hoisted_6 = [\"value\", \"checked\"];\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"checkbox\"\n}, \"Включить orbit control\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeColor('grey'))\n  }, \"серый\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $options.changeColor('red'))\n  }, \"красный\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.changeColor('white'))\n  }, \"белый\")])]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.checked = $event),\n    value: _ctx.checkboxVal,\n    checked: $data.booleanValue,\n    onInput: _cache[4] || (_cache[4] = $event => $options.orbContChecked($event.target.value))\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_6), [[_vModelCheckbox, _ctx.checked]]), _hoisted_7])]);\n}","map":{"version":3,"mappings":";;AACSA,OAAK,EAAC;;;AACFA,OAAK,EAAC;;;gCACPC,oBAA6B,GAA7B,EAA6B,IAA7B,EAAG,wBAAH,EAAyB;AAAA;AAAzB;;;AACKD,OAAK,EAAC;;;AAMVA,OAAK,EAAC;;;;gCASPC,oBAAoD,OAApD,EAAoD;AAA7CC,KAAG,EAAC;AAAyC,CAApD,EAAsB,wBAAtB,EAA4C;AAAA;AAA5C;;;uBAlBRC,oBAoBM,KApBN,cAoBM,CAnBFF,oBAOM,KAPN,cAOM,CANFG,UAME,EALFH,oBAIM,KAJN,cAIM,CAHFA,oBAAmD,QAAnD,EAAmD;AAA1CI,WAAK,sCAAEC,qBAAW,MAAX,CAAF;AAAqC,GAAnD,EAAqC,OAArC,CAGE,EAFFL,oBAAoD,QAApD,EAAoD;AAA3CI,WAAK,sCAAEC,qBAAW,KAAX,CAAF;AAAsC,GAApD,EAAoC,SAApC,CAEE,EADFL,oBAAoD,QAApD,EAAoD;AAA3CI,WAAK,sCAAEC,qBAAW,OAAX,CAAF;AAAsC,GAApD,EAAsC,OAAtC,CACE,CAJN,CAKE,CAPN,CAmBE,EAXFL,oBAUM,KAVN,cAUM,iBATFA,oBAOC,OAPD,EAOC;AANDM,QAAI,EAAC,UAMJ;AALDC,MAAE,EAAC,UAKF;+DAJQC,eAAOC,OAIf;AAHAC,SAAK,EAAEF,gBAGP;AAFAG,WAAO,EAAEC,kBAET;AADIC,WAAK,sCAAER,wBAAeI,MAAM,CAACK,MAAP,CAAcJ,KAA7B,CAAF;AACT,GAPD;;AAAA,oCAGSF,eAMP,EADFO,UACE,CAVN,CAWE,CApBN","names":["class","_createElementVNode","for","_createElementBlock","_hoisted_3","onClick","$options","type","id","_ctx","$event","value","checked","$data","onInput","target","_hoisted_7"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/ToolPanelContainer/Editor/EditParamContainer/SceneParam.vue"],"sourcesContent":["<template>\n    <div class=\"SceneParamRoot\">\n        <div class=\"backColor\">\n            <p>Смена цвета фона сцены</p>\n            <div class=\"colorBar\">\n                <button @click=\"changeColor('grey')\">серый</button>\n                <button @click=\"changeColor('red')\">красный</button>\n                <button @click=\"changeColor('white')\">белый</button>\n            </div>\n        </div>\n        <div class=\"orbControl\">\n            <input \n            type=\"checkbox\" \n            id=\"checkbox\" \n            v-model=\"checked\" \n            :value=\"checkboxVal\"\n            :checked=\"booleanValue\"\n            v-on:input=\"orbContChecked($event.target.value)\"\n            >\n            <label for=\"checkbox\">Включить orbit control</label>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default{\n    data(){\n        return{\n        booleanValue:false\n        }\n    },\n    methods:{\n        changeColor(color){\n            try{\n                this.emitter.emit(\"SceneBackgroundColor\", color);\n            }\n            catch(e){\n                console.error('asufhkj'); //прокинуть обработчик ошибок\n            }\n        },\n        orbContChecked(val){\n            console.log(val)\n        }\n    }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}