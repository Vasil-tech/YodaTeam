{"ast":null,"code":"let session = [];\nimport Rendering from '../scripts/Three/Renderering.js';\nimport * as THREE from 'three';\nimport OrbitControl from 'three-orbitcontrols';\nimport { camera } from '../scripts/Three/Renderering.js';\nimport { controls } from '../scripts/Three/Renderering.js';\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false,\n      renderNum: 0,\n      autoRotate: false\n    };\n  },\n\n  methods: {},\n  mounted: function () {\n    start3d(THREE);\n  },\n  created: function () {\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue, this.autoRotate);\n      this.color = color;\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      this.orbValue = orbValue;\n      start3d(THREE, this.color, orbValue);\n    });\n    this.emitter.on(\"RotateOn\", autoRotate => {\n      this.autoRotate = autoRotate;\n      start3d(THREE, this.color, true, this.autoRotate);\n    }); // this.emitter.on(\"FullScreenCanvas\", data=>{\n    //     start3d(THREE, this.color, this.orbValue, data, true)\n    // })\n  }\n};\n\nfunction start3d(THREE, color = \"black\", orbCont, autoRotate = false) {\n  try {\n    // if(controls.object != \"undefined\"){\n    //     console.log(controls.object)\n    // }\n    console.log(\"last controls\", controls);\n    console.log(\"last camera\", camera);\n    let cameraPosition = {};\n\n    if (typeof session[0] == 'object') {\n      cameraPosition = camera.position;\n    } else {\n      cameraPosition.x = 0;\n      cameraPosition.y = 0;\n      cameraPosition.z = 1000;\n    }\n\n    if (orbCont) {\n      session[0] = new Rendering(THREE, color, OrbitControl, autoRotate, cameraPosition);\n    } else {\n      session[0] = new Rendering(THREE, color, false, null, cameraPosition);\n    }\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,IAAIA,OAAM,GAAI,EAAd;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AACA,SAAQC,QAAR,QAAuB,iCAAvB;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE,KAFR;AAGFC,eAAS,EAAC,CAHR;AAIFC,gBAAU,EAAE;AAJV,KAAN;AAMH,GARU;;AASXC,SAAO,EAAC,EATG;AAYXC,SAAO,EAAE,YAAU;AACfC,WAAO,CAACX,KAAD,CAAP;AACH,GAdU;AAeXY,SAAO,EAAE,YAAU;AACf,SAAKC,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCT,KAAI,IAAK;AAC7CM,aAAO,CAACX,KAAD,EAAQK,KAAR,EAAe,KAAKC,QAApB,EAA8B,KAAKE,UAAnC,CAAP;AACA,WAAKH,KAAL,GAAaA,KAAb;AACH,KAHD;AAIA,SAAKQ,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCR,QAAO,IAAI;AAC7C,WAAKA,QAAL,GAAgBA,QAAhB;AACAK,aAAO,CAACX,KAAD,EAAQ,KAAKK,KAAb,EAAoBC,QAApB,CAAP;AACH,KAHD;AAIA,SAAKO,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BN,UAAU,IAAG;AACrC,WAAKA,UAAL,GAAkBA,UAAlB;AACAG,aAAO,CAACX,KAAD,EAAQ,KAAKK,KAAb,EAAoB,IAApB,EAA0B,KAAKG,UAA/B,CAAP;AACH,KAHD,EATe,CAaf;AACA;AACA;AACJ;AA/BW,CAAf;;AAkCA,SAASG,OAAT,CAAiBX,KAAjB,EAAwBK,KAAK,GAAC,OAA9B,EAAuCU,OAAvC,EAAgDP,UAAS,GAAI,KAA7D,EAAmE;AAC/D,MAAG;AACC;AACA;AACA;AACAQ,WAAO,CAACC,GAAR,CAAY,eAAZ,EAA4Bd,QAA5B;AACAa,WAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bf,MAA3B;AACA,QAAIgB,cAAa,GAAI,EAArB;;AACA,QAAG,OAAOpB,OAAO,CAAC,CAAD,CAAd,IAAqB,QAAxB,EAAiC;AAC7BoB,oBAAa,GAAIhB,MAAM,CAACiB,QAAxB;AACH,KAFD,MAEK;AACDD,oBAAc,CAACE,CAAf,GAAmB,CAAnB;AACAF,oBAAc,CAACG,CAAf,GAAmB,CAAnB;AACAH,oBAAc,CAACI,CAAf,GAAmB,IAAnB;AACJ;;AACA,QAAGP,OAAH,EAAW;AACPjB,aAAO,CAAC,CAAD,CAAP,GAAW,IAAIC,SAAJ,CAAcC,KAAd,EAAqBK,KAArB,EAA4BJ,YAA5B,EAA0CO,UAA1C,EAAsDU,cAAtD,CAAX;AACJ,KAFA,MAGI;AACApB,aAAO,CAAC,CAAD,CAAP,GAAW,IAAIC,SAAJ,CAAcC,KAAd,EAAqBK,KAArB,EAA4B,KAA5B,EAAmC,IAAnC,EAAyCa,cAAzC,CAAX;AACJ;AACJ,GApBA,CAqBA,OAAMK,CAAN,EAAQ;AACJ,SAAKV,OAAL,CAAaW,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AACJ;AACJ","names":["session","Rendering","THREE","OrbitControl","camera","controls","data","color","orbValue","renderNum","autoRotate","methods","mounted","start3d","created","emitter","on","orbCont","console","log","cameraPosition","position","x","y","z","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nlet session = [];\nimport Rendering from '../scripts/Three/Renderering.js'\nimport * as THREE from 'three'\nimport OrbitControl from 'three-orbitcontrols'\nimport {camera} from '../scripts/Three/Renderering.js'\nimport {controls} from '../scripts/Three/Renderering.js'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n            renderNum:0,\n            autoRotate: false,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        start3d(THREE)\n    },\n    created: function(){\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue, this.autoRotate)\n            this.color = color\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            this.orbValue = orbValue\n            start3d(THREE, this.color, orbValue)\n        })\n        this.emitter.on(\"RotateOn\", autoRotate=> {\n            this.autoRotate = autoRotate\n            start3d(THREE, this.color, true, this.autoRotate)\n        })\n        // this.emitter.on(\"FullScreenCanvas\", data=>{\n        //     start3d(THREE, this.color, this.orbValue, data, true)\n        // })\n    }\n}\n\nfunction start3d(THREE, color=\"black\", orbCont, autoRotate = false){\n    try{\n        // if(controls.object != \"undefined\"){\n        //     console.log(controls.object)\n        // }\n        console.log(\"last controls\",controls)\n        console.log(\"last camera\", camera)\n        let cameraPosition = {};\n        if(typeof session[0] == 'object'){\n            cameraPosition = camera.position\n        }else{\n            cameraPosition.x = 0;\n            cameraPosition.y = 0;\n            cameraPosition.z = 1000;\n        }\n        if(orbCont){\n            session[0]=new Rendering(THREE, color, OrbitControl, autoRotate, cameraPosition)\n        }\n        else{\n            session[0]=new Rendering(THREE, color, false, null, cameraPosition);\n        }\n    }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}