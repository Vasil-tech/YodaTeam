{"ast":null,"code":"let session = [];\nimport Rendering from '../scripts/Three/Renderering.js';\nimport * as THREE from 'three'; //import OrbitControl from 'three-orbitcontrols'\n\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false,\n      renderNum: 0\n    };\n  },\n\n  methods: {},\n  mounted: function () {\n    start3d(THREE);\n  },\n  created: function () {\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue);\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      start3d(THREE, this.color, this.orbValue = orbValue);\n    });\n    this.emitter.on(\"RotateOn\", data => {\n      start3d(THREE, this.color, this.orbValue, data);\n    });\n    this.emitter.on(\"FullScreenCanvas\", data => {\n      start3d(THREE, this.color, this.orbValue, data, true);\n    });\n  }\n};\n\nfunction start3d(THREE, color = \"black\", orbCont, autoRotate) {\n  try {\n    if (orbCont) {\n      session[0] = new Rendering(THREE, color, false, autoRotate);\n    } else {\n      session[0] = new Rendering(THREE, color, false);\n    } // if(orbCont){\n    //     rotationStatus = true\n    //     session[0] = new Renderering(THREE, color, OrbitControl, autoRotate)\n    // }\n    // else{\n    //     if(rotationStatus){\n    //         console.log(session[0].rend.controls.position)\n    //     }\n    //         session[0] = new Renderering(THREE, color, false, autoRotate)\n    //     }\n\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,IAAIA,OAAM,GAAI,EAAd;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE,KAFR;AAGFC,eAAS,EAAC;AAHR,KAAN;AAKH,GAPU;;AAQXC,SAAO,EAAC,EARG;AAWXC,SAAO,EAAE,YAAU;AACfC,WAAO,CAACP,KAAD,CAAP;AACH,GAbU;AAcXQ,SAAO,EAAE,YAAU;AACf,SAAKC,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCR,KAAI,IAAK;AAC7CK,aAAO,CAACP,KAAD,EAAQE,KAAR,EAAe,KAAKC,QAApB,CAAP;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCP,QAAO,IAAI;AAC7CI,aAAO,CAACP,KAAD,EAAQ,KAAKE,KAAb,EAAoB,KAAKC,QAAL,GAAgBA,QAApC,CAAP;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BT,IAAI,IAAG;AAC/BM,aAAO,CAACP,KAAD,EAAQ,KAAKE,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,CAAP;AACH,KAFD;AAGA,SAAKQ,OAAL,CAAaC,EAAb,CAAgB,kBAAhB,EAAoCT,IAAI,IAAE;AACtCM,aAAO,CAACP,KAAD,EAAQ,KAAKE,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,EAAyC,IAAzC,CAAP;AACH,KAFD;AAGJ;AA3BW,CAAf;;AA8BA,SAASM,OAAT,CAAiBP,KAAjB,EAAwBE,KAAK,GAAC,OAA9B,EAAuCS,OAAvC,EAAgDC,UAAhD,EAA2D;AACvD,MAAG;AACC,QAAGD,OAAH,EAAW;AACPb,aAAO,CAAC,CAAD,CAAP,GAAW,IAAIC,SAAJ,CAAcC,KAAd,EAAqBE,KAArB,EAA4B,KAA5B,EAAmCU,UAAnC,CAAX;AACJ,KAFA,MAGI;AACAd,aAAO,CAAC,CAAD,CAAP,GAAW,IAAIC,SAAJ,CAAcC,KAAd,EAAqBE,KAArB,EAA4B,KAA5B,CAAX;AACJ,KAND,CASC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,GAnBJ,CAoBA,OAAMW,CAAN,EAAQ;AACJ,SAAKJ,OAAL,CAAaK,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AACJ;AACJ","names":["session","Rendering","THREE","data","color","orbValue","renderNum","methods","mounted","start3d","created","emitter","on","orbCont","autoRotate","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nlet session = [];\nimport Rendering from '../scripts/Three/Renderering.js'\nimport * as THREE from 'three'\n//import OrbitControl from 'three-orbitcontrols'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n            renderNum:0,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        start3d(THREE)\n    },\n    created: function(){\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue)\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            start3d(THREE, this.color, this.orbValue = orbValue)\n        })\n        this.emitter.on(\"RotateOn\", data=> {\n            start3d(THREE, this.color, this.orbValue, data)\n        })\n        this.emitter.on(\"FullScreenCanvas\", data=>{\n            start3d(THREE, this.color, this.orbValue, data, true)\n        })\n    }\n}\n\nfunction start3d(THREE, color=\"black\", orbCont, autoRotate){\n    try{\n        if(orbCont){\n            session[0]=new Rendering(THREE, color, false, autoRotate)\n        }\n        else{\n            session[0]=new Rendering(THREE, color, false);\n        }\n\n\n        // if(orbCont){\n        //     rotationStatus = true\n        //     session[0] = new Renderering(THREE, color, OrbitControl, autoRotate)\n        // }\n        // else{\n        //     if(rotationStatus){\n        //         console.log(session[0].rend.controls.position)\n        //     }\n        //         session[0] = new Renderering(THREE, color, false, autoRotate)\n        //     }\n        }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n    }\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}