{"ast":null,"code":"//import * as THREE from 'three'\nimport loader from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nlet THREE = null;\nexport default class {\n  constructor(canvas, width, height, THREE) {\n    THREE = THREE;\n    let answ = this.setCanvasSize(canvas, width, height);\n\n    if (answ) {\n      this.draw(canvas, width, height);\n    } else {\n      errorHandler('Rendering', 'constructor', answ, 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.setAttribute(\"width\", width);\n      canvas.setAttribute(\"height\", height);\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  draw(canvas, width, height) {\n    try {\n      let renderer = this.Renderer(canvas);\n      let scene = this.Scene();\n      let camera = this.Camera(width, height);\n      let light = this.Light();\n\n      try {\n        let ldr = new loader();\n\n        try {\n          scene.add(light, ldr);\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } catch (e) {\n        errorHandler('Rendering', 'draw_2', e, 'canvas');\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  }\n\n  Light() {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene() {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color('black');\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["loader","errorHandler","THREE","constructor","canvas","width","height","answ","setCanvasSize","draw","setAttribute","e","renderer","Renderer","scene","Scene","camera","Camera","light","Light","ldr","add","render","AmbientLight","PerspectiveCamera","position","set","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["//import * as THREE from 'three'\nimport loader from './Loader.js'\nimport errorHandler from '../errorHandler.js'\n\nlet THREE = null;\nexport default class{\n    constructor(canvas, width, height, THREE) {\n        THREE = THREE;\n        let answ = this.setCanvasSize(canvas, width, height)\n        if(answ){\n            this.draw(canvas, width, height);\n        }\n        else{\n            errorHandler('Rendering', 'constructor', answ, 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.setAttribute(\"width\", width);\n            canvas.setAttribute(\"height\", height);\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    draw(canvas, width, height){\n        try{\n            let renderer = this.Renderer(canvas);\n            let scene = this.Scene();\n            let camera = this.Camera(width, height);\n            let light = this.Light();\n            try{\n                let ldr = new loader();\n                try{\n                    scene.add(light, ldr);\n                    renderer.render(scene, camera);\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            catch(e){\n                errorHandler('Rendering', 'draw_2', e, 'canvas');\n            }\n\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    Light(){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color('black');\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}