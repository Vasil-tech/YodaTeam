{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nlet camera, controls, scene, renderer, light;\nexport default class {\n  constructor(canvas, width, height, THREE, color, OrbitControl, autoRotate) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      if (this.init(THREE, canvas, color, width, height)) {\n        this.addToScene(THREE);\n\n        if (OrbitControl != false) {\n          this.setControls(OrbitControl, canvas);\n          controls.autoRotateSpeed = 2;\n          controls.autoRotate = autoRotate;\n          console.log(controls);\n          animate();\n        }\n      }\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  init(THREE, canvas, color, width, height) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      light = this.Light(THREE);\n      return true;\n    } catch (e) {\n      errorHandler('Rendering', 'init', e, 'canvas');\n    }\n  }\n\n  setControls(OrbitControl, canvas) {\n    controls = new OrbitControl(camera, canvas);\n    controls.target.set(0, 0, 0);\n    controls.update();\n  }\n\n  addToScene(THREE) {\n    try {\n      scene.add(Loader(THREE));\n    } catch (e) {\n      errorHandler('Rendering', 'addToScene_1', e, 'canvas');\n    }\n\n    try {\n      scene.add(light);\n      renderer.render(scene, camera);\n    } catch (e) {\n      errorHandler('Rendering', 'addToScene_2', e, 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}\n\nfunction animate() {\n  try {\n    console.log(camera);\n    controls.update();\n    render();\n    requestAnimationFrame(animate);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'camvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","camera","controls","scene","renderer","light","constructor","canvas","width","height","THREE","color","OrbitControl","autoRotate","setCanvasSize","init","addToScene","setControls","autoRotateSpeed","console","log","animate","Renderer","Scene","Camera","Light","e","target","set","update","add","render","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nlet camera, controls, scene, renderer, light;\n\n\nexport default class{\n    constructor(canvas, width, height, THREE, color, OrbitControl, autoRotate) {\n        if(this.setCanvasSize(canvas, width, height)){\n            if(this.init(THREE, canvas, color, width, height)){\n                this.addToScene(THREE)\n                if(OrbitControl!=false){\n                    this.setControls(OrbitControl, canvas)\n                    controls.autoRotateSpeed = 2;\n                    controls.autoRotate = autoRotate\n                    console.log(controls)\n                    animate()\n                }\n            }\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    init(THREE, canvas, color, width, height){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            light = this.Light(THREE);\n            return true;\n        }\n        catch(e){\n            errorHandler('Rendering', 'init', e, 'canvas')\n        }\n    }\n\n    setControls(OrbitControl, canvas){\n        controls = new OrbitControl(camera, canvas)\n        controls.target.set(0, 0, 0);\n        controls.update();\n    }\n    addToScene(THREE){\n        try{\n            scene.add(Loader(THREE))\n        }\n        catch(e){\n            errorHandler('Rendering', 'addToScene_1', e, 'canvas')\n        }\n        try{\n            scene.add(light)\n            renderer.render(scene, camera);\n        }\n        catch(e){\n            errorHandler('Rendering', 'addToScene_2', e, 'canvas')\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}\n\nfunction animate(){\n    try{\n        console.log(camera)\n        controls.update();\n        render();\n        requestAnimationFrame( animate );\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'camvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}"]},"metadata":{},"sourceType":"module"}