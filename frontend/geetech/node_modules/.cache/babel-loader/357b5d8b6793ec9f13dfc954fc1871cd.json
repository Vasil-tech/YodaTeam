{"ast":null,"code":"import threeLogic from '../scripts/Three/threeLogic.js';\nimport * as THREE from 'three';\nimport OrbitControl from 'three-orbitcontrols';\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false\n    };\n  },\n\n  methods: {},\n  mounted: function () {\n    start3d(THREE);\n  },\n  created: function () {\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue), this.color = color;\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      start3d(THREE, this.color, this.orbValue = orbValue);\n    });\n    this.emitter.on(\"RotateOn\", data => {\n      if (data) {\n        start3d(THREE, this.color, this.orbValue, autoRotate = data);\n      }\n    });\n  }\n};\n\nfunction start3d(THREE, color = 'black', orbCont = false, autoRotate = false) {\n  try {\n    if (orbCont == true) {\n      orbCont = OrbitControl;\n    }\n\n    console.log(autoRotate); //создание экземпляров \n\n    const answ = new threeLogic(THREE, color, orbCont);\n    console.log(answ, orbCont);\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n} // window.onresize = function(){\n//     try{\n//         start3d(THREE, this.color, this.orbValue)\n//     }\n//     catch(e){\n//         errorHandler('ThreeContainer', 'onresize', e, 'canvas')\n//     }\n// }","map":{"version":3,"mappings":"AASA,OAAOA,UAAP,MAAuB,gCAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE;AAFR,KAAN;AAIH,GANU;;AAOXC,SAAO,EAAC,EAPG;AAUXC,SAAO,EAAE,YAAU;AACfC,WAAO,CAACP,KAAD,CAAP;AACH,GAZU;AAaXQ,SAAO,EAAE,YAAU;AACf,SAAKC,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCP,KAAI,IAAK;AAC7CI,aAAO,CAACP,KAAD,EAAQG,KAAR,EAAe,KAAKC,QAApB,CAAP,EAAsC,KAAKD,KAAL,GAAYA,KAAlD;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCN,QAAO,IAAI;AAC7CG,aAAO,CAACP,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAL,GAAgBA,QAApC,CAAP;AACH,KAFD;AAGA,SAAKK,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BR,IAAI,IAAG;AAC/B,UAAGA,IAAH,EAAQ;AACJK,eAAO,CAACP,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCO,UAAS,GAAIT,IAAhD,CAAP;AACJ;AACH,KAJD;AAKJ;AAzBW,CAAf;;AA4BA,SAASK,OAAT,CAAiBP,KAAjB,EAAwBG,KAAI,GAAI,OAAhC,EAAyCS,OAAO,GAAC,KAAjD,EAAwDD,UAAS,GAAI,KAArE,EAA2E;AACvE,MAAG;AACC,QAAGC,OAAM,IAAK,IAAd,EAAmB;AACfA,aAAM,GAAIX,YAAV;AACJ;;AACAY,WAAO,CAACC,GAAR,CAAYH,UAAZ,EAJD,CAKC;;AACA,UAAMI,IAAG,GAAI,IAAIhB,UAAJ,CAAeC,KAAf,EAAsBG,KAAtB,EAA6BS,OAA7B,CAAb;AACAC,WAAO,CAACC,GAAR,CAAYC,IAAZ,EAAkBH,OAAlB;AACA,GARJ,CASA,OAAMI,CAAN,EAAQ;AACJ,SAAKP,OAAL,CAAaQ,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AAEJ;AACJ,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":["threeLogic","THREE","OrbitControl","data","color","orbValue","methods","mounted","start3d","created","emitter","on","autoRotate","orbCont","console","log","answ","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nimport threeLogic from '../scripts/Three/threeLogic.js'\nimport * as THREE from 'three'\nimport OrbitControl from 'three-orbitcontrols'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        start3d(THREE)\n    },\n    created: function(){\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue), this.color= color\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            start3d(THREE, this.color, this.orbValue = orbValue)\n        })\n        this.emitter.on(\"RotateOn\", data=> {\n            if(data){\n                start3d(THREE, this.color, this.orbValue, autoRotate = data)\n            }\n        })\n    }\n}\n\nfunction start3d(THREE, color = 'black', orbCont=false, autoRotate = false){\n    try{\n        if(orbCont == true){\n            orbCont = OrbitControl\n        }\n        console.log(autoRotate)\n        //создание экземпляров \n        const answ = new threeLogic(THREE, color, orbCont)\n        console.log(answ, orbCont)\n        }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n\n    }\n}\n\n\n// window.onresize = function(){\n//     try{\n//         start3d(THREE, this.color, this.orbValue)\n//     }\n//     catch(e){\n//         errorHandler('ThreeContainer', 'onresize', e, 'canvas')\n//     }\n// }\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}