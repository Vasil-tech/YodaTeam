{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nlet camera, controls, scene, renderer;\n\nfunction animate() {\n  try {\n    controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n\n    render();\n    requestAnimationFrame(animate);\n    console.log(controls);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'camvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}\n\nexport default class main {\n  constructor(canvas, width, height, THREE, color, OrbitControl) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      let a = this.draw(canvas, width, height, THREE, color, OrbitControl);\n      animate(a);\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  draw(canvas, width, height, THREE, color, OrbitControl) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      if (OrbitControl != false) {\n        try {\n          controls = new OrbitControl(camera, canvas);\n          controls.target.set(0, 0, 0);\n          controls.update();\n          scene.add(Loader(THREE));\n          scene.add(light);\n          return true;\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } else {\n        try {\n          scene.add(Loader(THREE));\n          scene.add(light);\n          renderer.render(scene, camera);\n          return true;\n        } catch (e) {\n          errorHandler('Rendering', 'draw_2', e, 'canvas');\n        }\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  } // Controls(camera, canvas, OrbitControl){\n  //     return controls\n  // }\n\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","camera","controls","scene","renderer","animate","update","render","requestAnimationFrame","console","log","e","main","constructor","canvas","width","height","THREE","color","OrbitControl","setCanvasSize","a","draw","Renderer","Scene","Camera","light","Light","target","set","add","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nlet camera, controls, scene, renderer;\n\nfunction animate(){\n    try{\n        controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n        render();\n        requestAnimationFrame( animate );\n        console.log(controls)\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'camvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}\nexport default class main{\n    constructor(canvas, width, height, THREE, color, OrbitControl) {\n        if(this.setCanvasSize(canvas, width, height)){\n            let a = this.draw(canvas, width, height, THREE, color, OrbitControl);\n            animate(a);\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    draw(canvas, width, height, THREE, color, OrbitControl){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            if(OrbitControl != false){\n                try{\n                    controls = new OrbitControl(camera, canvas)\n                    controls.target.set(0, 0, 0);\n                    controls.update();\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    return true;\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            else{\n                try{\n\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    renderer.render(scene, camera);\n                    return true\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_2', e, 'canvas');\n                }\n            }\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    // Controls(camera, canvas, OrbitControl){\n        \n    //     return controls\n    // }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}