{"ast":null,"code":"export default {\n  data() {\n    return {\n      rotateStatus: false,\n      checked: false\n    };\n  },\n\n  methods: {\n    changeColor(color) {\n      try {\n        this.emitter.emit(\"SceneBackgroundColor\", color);\n      } catch (e) {\n        this.emitter.emit(\"CanvasError\", {\n          'file': 'SceneParam',\n          'method': 'changeColor',\n          'ext': e\n        });\n      }\n    },\n\n    orbContChecked(orbValue) {\n      try {\n        this.emitter.emit(\"OrbitControlStatus\", orbValue);\n        console.log(orbValue);\n      } catch (e) {\n        this.emitter.emit(\"CanvasError\", {\n          'file': 'SceneParam',\n          'method': 'orbContChecked',\n          'ext': e\n        });\n      }\n    },\n\n    fullScreen() {\n      try {\n        this.emitter.emit('FullScreenCanvas', true);\n      } catch (e) {\n        this.emitter.emit(\"CanvasError\", {\n          'file': 'SceneParam',\n          'method': 'fullScreen',\n          'ext': e\n        });\n      }\n    },\n\n    rotateOn() {\n      try {\n        this.rotateStatus = !this.rotateStatus;\n        this.emitter.emit(\"RotateOn\", this.rotateStatus);\n      } catch (e) {\n        this.emitter.emit(\"CanvasError\", {\n          'file': 'SceneParam',\n          'method': 'rotateOn',\n          'ext': e\n        });\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiCA,eAAc;AACVA,MAAI,GAAE;AACF,WAAM;AACHC,kBAAY,EAAE,KADX;AAEHC,aAAO,EAAE;AAFN,KAAN;AAIH,GANS;;AAOVC,SAAO,EAAC;AACJC,eAAW,CAACC,KAAD,EAAO;AACd,UAAG;AACC,aAAKC,OAAL,CAAaC,IAAb,CAAkB,sBAAlB,EAA0CF,KAA1C;AACJ,OAFA,CAGA,OAAMG,CAAN,EAAQ;AACJ,aAAKF,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiC;AAAC,kBAAQ,YAAT;AAAuB,oBAAS,aAAhC;AAA+C,iBAAMC;AAArD,SAAjC;AACJ;AACH,KARG;;AASJC,kBAAc,CAACC,QAAD,EAAU;AACpB,UAAG;AACC,aAAKJ,OAAL,CAAaC,IAAb,CAAkB,oBAAlB,EAAwCG,QAAxC;AACAC,eAAO,CAACC,GAAR,CAAYF,QAAZ;AACJ,OAHA,CAIA,OAAMF,CAAN,EAAQ;AACJ,aAAKF,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiC;AAAC,kBAAQ,YAAT;AAAuB,oBAAS,gBAAhC;AAAkD,iBAAMC;AAAxD,SAAjC;AACJ;AACH,KAjBG;;AAkBJK,cAAU,GAAE;AACR,UAAG;AACC,aAAKP,OAAL,CAAaC,IAAb,CAAkB,kBAAlB,EAAsC,IAAtC;AACJ,OAFA,CAGA,OAAMC,CAAN,EAAQ;AACJ,aAAKF,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiC;AAAC,kBAAQ,YAAT;AAAuB,oBAAS,YAAhC;AAA8C,iBAAMC;AAApD,SAAjC;AACJ;AACH,KAzBG;;AA0BJM,YAAQ,GAAE;AACN,UAAG;AACC,aAAKb,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,aAAKK,OAAL,CAAaC,IAAb,CAAkB,UAAlB,EAA8B,KAAKN,YAAnC;AACJ,OAHA,CAIA,OAAMO,CAAN,EAAQ;AACJ,aAAKF,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiC;AAAC,kBAAQ,YAAT;AAAuB,oBAAU,UAAjC;AAA6C,iBAAOC;AAApD,SAAjC;AACJ;AACJ;;AAlCI;AAPE,CAAd","names":["data","rotateStatus","checked","methods","changeColor","color","emitter","emit","e","orbContChecked","orbValue","console","log","fullScreen","rotateOn"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/ToolPanelContainer/Editor/EditParamContainer/SceneParam.vue"],"sourcesContent":["<template>\n    <div class=\"SceneParamRoot\">\n        <div class=\"backColor\">\n            <p>Смена цвета фона сцены</p>\n            <div class=\"colorBar\">\n                <button @click=\"changeColor('grey')\">серый</button>\n                <button @click=\"changeColor('red')\">красный</button>\n                <button @click=\"changeColor('white')\">белый</button>\n            </div>\n        </div>\n        <div class=\"control\">\n            <div class=\"orbControl\">\n            <input \n                type=\"checkbox\" \n                id=\"checkbox\" \n                v-model=\"checked\" \n                :value=\"checkboxVal\"\n                :checked=\"booleanValue\"\n                @input=\"orbContChecked(!checked)\"\n            >\n            <label for=\"checkbox\">Включить orbit control</label>\n            </div>\n            <div class=\"rotate\" v-if=\"checked\">\n                <button @click=\"rotateOn()\">Auto rotate</button>\n            </div>\n            <div class=\"fullScreenButt\" id=\"fullScreenButt\">\n                <button @click=\"\">Открыть на весь экран</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default{\n    data(){\n        return{\n           rotateStatus: false,\n           checked: false\n        }\n    },\n    methods:{\n        changeColor(color){\n            try{\n                this.emitter.emit(\"SceneBackgroundColor\", color);\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'changeColor', 'ext':e})\n            }\n        },\n        orbContChecked(orbValue){\n            try{\n                this.emitter.emit(\"OrbitControlStatus\", orbValue)\n                console.log(orbValue)\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'orbContChecked', 'ext':e})\n            }\n        },\n        fullScreen(){\n            try{\n                this.emitter.emit('FullScreenCanvas', true)\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'fullScreen', 'ext':e})\n            }\n        },\n        rotateOn(){\n            try{\n                this.rotateStatus = !this.rotateStatus\n                this.emitter.emit(\"RotateOn\", this.rotateStatus)\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method': 'rotateOn', 'ext': e})\n            }\n        }\n    }\n}\n</script>\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}