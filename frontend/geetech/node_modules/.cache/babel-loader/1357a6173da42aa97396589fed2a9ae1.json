{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"SceneParamRoot\"\n};\nconst _hoisted_2 = {\n  class: \"backColor\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Смена цвета фона сцены\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = {\n  class: \"colorBar\"\n};\nconst _hoisted_5 = {\n  class: \"control\"\n};\nconst _hoisted_6 = {\n  class: \"orbControl\"\n};\nconst _hoisted_7 = [\"value\", \"checked\"];\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"checkbox\"\n}, \"Включить orbit control\", -1\n/* HOISTED */\n);\n\nconst _hoisted_9 = {\n  key: 0,\n  class: \"rotate\"\n};\nconst _hoisted_10 = {\n  class: \"fullScreenButt\",\n  id: \"fullScreenButt\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Sketch = _resolveComponent(\"Sketch\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_Sketch, {\n    modelValue: _ctx.colors,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.colors = $event)\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\"]), _createCommentVNode(\" <button @click=\\\"changeColor('grey')\\\">серый</button>\\n                <button @click=\\\"changeColor('red')\\\">красный</button>\\n                <button @click=\\\"changeColor('white')\\\">белый</button> \")])]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.checked = $event),\n    value: _ctx.checkboxVal,\n    checked: _ctx.booleanValue,\n    onInput: _cache[2] || (_cache[2] = $event => $options.orbContChecked(!$data.checked))\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_7), [[_vModelCheckbox, $data.checked]]), _hoisted_8]), $data.checked ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.rotateOn())\n  }, \"Auto rotate\")])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => $options.fullScreen())\n  }, \"Открыть на весь экран\")])])]);\n}","map":{"version":3,"mappings":";;AACSA,OAAK,EAAC;;;AACFA,OAAK,EAAC;;;gCACPC,oBAA6B,GAA7B,EAA6B,IAA7B,EAAG,wBAAH,EAAyB;AAAA;AAAzB;;;AACKD,OAAK,EAAC;;;AAOVA,OAAK,EAAC;;;AACFA,OAAK,EAAC;;;;gCASXC,oBAAoD,OAApD,EAAoD;AAA7CC,KAAG,EAAC;AAAyC,CAApD,EAAsB,wBAAtB,EAA4C;AAAA;AAA5C;;;;AAEKF,OAAK,EAAC;;;AAGNA,OAAK,EAAC;AAAiBG,IAAE,EAAC;;;;;uBAzBvCC,oBA6BM,KA7BN,cA6BM,CA5BFH,oBAQM,KARN,cAQM,CAPFI,UAOE,EANFJ,oBAKM,KALN,cAKM,CAJFK,aAA0BC,iBAA1B,EAA0B;gBAATC,WAAS;+DAATA,cAAMC;AAAG,GAA1B;;AAAA,mBAIE,EAHFC,8NAGE,CALN,CAME,CARN,CA4BE,EAnBFT,oBAkBM,KAlBN,cAkBM,CAjBFA,oBAUM,KAVN,cAUM,iBATNA,oBAOC,OAPD,EAOC;AANGU,QAAI,EAAC,UAMR;AALGR,MAAE,EAAC,UAKN;+DAJYS,gBAAOH,OAInB;AAHII,SAAK,EAAEL,gBAGX;AAFIM,WAAO,EAAEN,iBAEb;AADIO,WAAK,sCAAEC,wBAAc,CAAEJ,aAAhB,CAAF;AACT,GAPD;;AAAA,oCAGaA,gBAMP,EADNK,UACM,CAVN,CAiBE,EANwBL,+BAA1BR,oBAEM,KAFN,cAEM,CADFH,oBAAgD,QAAhD,EAAgD;AAAvCiB,WAAK,sCAAEF,mBAAF;AAAkC,GAAhD,EAA4B,aAA5B,CACE,CAFN,sCAME,EAHFf,oBAEM,KAFN,eAEM,CADFA,oBAA4D,QAA5D,EAA4D;AAAnDiB,WAAK,sCAAEF,qBAAF;AAA8C,GAA5D,EAA8B,uBAA9B,CACE,CAFN,CAGE,CAlBN,CAmBE,CA7BN","names":["class","_createElementVNode","for","id","_createElementBlock","_hoisted_3","_createVNode","_component_Sketch","_ctx","$event","_createCommentVNode","type","$data","value","checked","onInput","$options","_hoisted_8","onClick"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/ToolPanelContainer/Editor/EditParamContainer/SceneParam.vue"],"sourcesContent":["<template>\n    <div class=\"SceneParamRoot\">\n        <div class=\"backColor\">\n            <p>Смена цвета фона сцены</p>\n            <div class=\"colorBar\">\n                <Sketch v-model=\"colors\"/>\n                <!-- <button @click=\"changeColor('grey')\">серый</button>\n                <button @click=\"changeColor('red')\">красный</button>\n                <button @click=\"changeColor('white')\">белый</button> -->\n            </div>\n        </div>\n        <div class=\"control\">\n            <div class=\"orbControl\">\n            <input \n                type=\"checkbox\" \n                id=\"checkbox\" \n                v-model=\"checked\" \n                :value=\"checkboxVal\"\n                :checked=\"booleanValue\"\n                @input=\"orbContChecked(!checked)\"\n            >\n            <label for=\"checkbox\">Включить orbit control</label>\n            </div>\n            <div class=\"rotate\" v-if=\"checked\">\n                <button @click=\"rotateOn()\">Auto rotate</button>\n            </div>\n            <div class=\"fullScreenButt\" id=\"fullScreenButt\">\n                <button @click=\"fullScreen()\">Открыть на весь экран</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { Sketch } from '@ckpack/vue-color';\nexport default{\n    data(){\n        return{\n            Sketch,\n            rotateStatus: false,\n            checked: false\n        }\n    },\n    methods:{\n        changeColor(color){\n            try{\n                this.emitter.emit(\"SceneBackgroundColor\", color);\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'changeColor', 'ext':e})\n            }\n        },\n        orbContChecked(orbValue){\n            try{\n                this.emitter.emit(\"OrbitControlStatus\", orbValue)\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'orbContChecked', 'ext':e})\n            }\n        },\n        fullScreen(){\n            // try{\n            //     this.emitter.emit('FullScreenCanvas', true)\n            // }\n            // catch(e){\n            //     this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method':'fullScreen', 'ext':e})\n            // }\n        },\n        rotateOn(){\n            try{\n                this.rotateStatus = !this.rotateStatus\n                this.emitter.emit(\"RotateOn\", this.rotateStatus)\n            }\n            catch(e){\n                this.emitter.emit(\"CanvasError\", {'file': 'SceneParam', 'method': 'rotateOn', 'ext': e})\n            }\n        }\n    }\n}\n</script>\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}