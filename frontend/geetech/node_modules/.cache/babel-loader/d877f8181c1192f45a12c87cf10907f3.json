{"ast":null,"code":"let session = [];\nimport Renderering from '../scripts/Three/Renderering.js';\nimport * as THREE from 'three';\nimport OrbitControl from 'three-orbitcontrols';\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false,\n      renderNum: 0\n    };\n  },\n\n  methods: {},\n  mounted: function () {\n    start3d(THREE);\n  },\n  created: function () {\n    this.emitter.on(\"Rendering\", data => {\n      this.renderNum = data.Num;\n    });\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue), this.color = color;\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      start3d(THREE, this.color, this.orbValue = orbValue);\n    });\n    this.emitter.on(\"RotateOn\", data => {\n      start3d(THREE, this.color, this.orbValue, data);\n    });\n    this.emitter.on(\"FullScreenCanvas\", data => {\n      start3d(THREE, this.color, this.orbValue, data, true);\n    });\n  }\n};\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate) {\n  try {\n    if (orbCont) {\n      session[0] = new Renderering(THREE, color, OrbitControl, autoRotate);\n    } else {\n      if (rotationStatus) {\n        console.log(session[0].rend.controls.position);\n      }\n\n      session[0] = new Renderering(THREE, color, false, autoRotate);\n    }\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,IAAIA,OAAM,GAAI,EAAd;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE,KAFR;AAGFC,eAAS,EAAC;AAHR,KAAN;AAKH,GAPU;;AAQXC,SAAO,EAAC,EARG;AAWXC,SAAO,EAAE,YAAU;AACfC,WAAO,CAACR,KAAD,CAAP;AACH,GAbU;AAcXS,SAAO,EAAE,YAAU;AACf,SAAKC,OAAL,CAAaC,EAAb,CAAgB,WAAhB,EAA6BT,IAAI,IAAE;AACnC,WAAKG,SAAL,GAAiBH,IAAI,CAACU,GAAtB;AACC,KAFD;AAGA,SAAKF,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCR,KAAI,IAAK;AAC7CK,aAAO,CAACR,KAAD,EAAQG,KAAR,EAAe,KAAKC,QAApB,CAAP,EAAsC,KAAKD,KAAL,GAAYA,KAAlD;AACH,KAFD;AAGA,SAAKO,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCP,QAAO,IAAI;AAC7CI,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAL,GAAgBA,QAApC,CAAP;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BT,IAAI,IAAG;AAC/BM,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,CAAP;AACH,KAFD;AAGA,SAAKQ,OAAL,CAAaC,EAAb,CAAgB,kBAAhB,EAAoCT,IAAI,IAAE;AACtCM,aAAO,CAACR,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,EAAyC,IAAzC,CAAP;AACH,KAFD;AAGJ;AA9BW,CAAf;;AAiCA,SAASM,OAAT,CAAiBR,KAAjB,EAAwBG,KAAI,GAAI,OAAhC,EAAyCU,OAAzC,EAAkDC,UAAlD,EAA6D;AACzD,MAAG;AACC,QAAGD,OAAH,EAAW;AACPf,aAAO,CAAC,CAAD,CAAP,GAAa,IAAIC,WAAJ,CAAgBC,KAAhB,EAAuBG,KAAvB,EAA8BF,YAA9B,EAA4Ca,UAA5C,CAAb;AACJ,KAFA,MAGI;AACA,UAAGC,cAAH,EAAkB;AACdC,eAAO,CAACC,GAAR,CAAYnB,OAAO,CAAC,CAAD,CAAP,CAAWoB,IAAX,CAAgBC,QAAhB,CAAyBC,QAArC;AACJ;;AACItB,aAAO,CAAC,CAAD,CAAP,GAAa,IAAIC,WAAJ,CAAgBC,KAAhB,EAAuBG,KAAvB,EAA8B,KAA9B,EAAqCW,UAArC,CAAb;AACJ;AACJ,GAVJ,CAWA,OAAMO,CAAN,EAAQ;AACJ,SAAKX,OAAL,CAAaY,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AACJ;AACJ","names":["session","Renderering","THREE","OrbitControl","data","color","orbValue","renderNum","methods","mounted","start3d","created","emitter","on","Num","orbCont","autoRotate","rotationStatus","console","log","rend","controls","position","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nlet session = [];\nimport Renderering from '../scripts/Three/Renderering.js'\nimport * as THREE from 'three'\nimport OrbitControl from 'three-orbitcontrols'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n            renderNum:0,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        start3d(THREE)\n    },\n    created: function(){\n        this.emitter.on(\"Rendering\", data=>{\n        this.renderNum = data.Num;\n        })\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue), this.color= color\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            start3d(THREE, this.color, this.orbValue = orbValue)\n        })\n        this.emitter.on(\"RotateOn\", data=> {\n            start3d(THREE, this.color, this.orbValue, data)\n        })\n        this.emitter.on(\"FullScreenCanvas\", data=>{\n            start3d(THREE, this.color, this.orbValue, data, true)\n        })\n    }\n}\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate){\n    try{\n        if(orbCont){\n            session[0] = new Renderering(THREE, color, OrbitControl, autoRotate)\n        }\n        else{\n            if(rotationStatus){\n                console.log(session[0].rend.controls.position)\n            }\n                session[0] = new Renderering(THREE, color, false, autoRotate)\n            }\n        }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n    }\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}