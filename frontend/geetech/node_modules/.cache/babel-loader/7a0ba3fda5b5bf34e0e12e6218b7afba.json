{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nimport check from './SupportThreeCheck.js';\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nexport let camera;\nlet controls, scene, renderer, light;\nexport default class {\n  constructor(THREE, color, OrbitControl, autoRotate, cameraPosition = false) {\n    console.log(cameraPosition.x);\n    const ans = this.supportAndCnvsSize();\n    const canvas = ans.canvas;\n    let height = ans.height;\n    let width = ans.width;\n\n    try {\n      this.init(THREE, canvas, color, width, height);\n      this.addToScene(THREE);\n\n      if (OrbitControl != false) {\n        this.setControls(OrbitControl, canvas);\n\n        if (autoRotate) {\n          controls.autoRotate = autoRotate;\n          controls.autoRotateSpeed = 2;\n        }\n\n        animate();\n      } else {\n        renderer.render(scene, camera);\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"constructor\", e, \"canvas\");\n    }\n  }\n\n  supportAndCnvsSize() {\n    try {\n      const canvas = document.querySelector(\"#canvas\");\n      canvas.width = canvasWidht();\n      canvas.height = canvasHeight();\n      const checking = check(canvas);\n\n      if (checking.status == false) {\n        errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n      } else {\n        return {\n          canvas: canvas,\n          width: canvas.width,\n          height: canvas.height\n        };\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n    }\n\n    return false;\n  }\n\n  init(THREE, canvas, color, width, height) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      light = this.Light(THREE);\n    } catch (e) {\n      errorHandler('Rendering', 'init', e, 'canvas');\n    }\n  }\n\n  setControls(OrbitControl, canvas) {\n    controls = new OrbitControl(camera, canvas);\n    controls.target.set(0, 0, 0);\n    controls.update();\n  }\n\n  addToScene(THREE) {\n    try {\n      scene.add(Loader(THREE));\n      scene.add(light);\n    } catch (e) {\n      errorHandler('Rendering', 'addToScene', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}\n\nfunction animate() {\n  try {\n    controls.update();\n    render();\n    requestAnimationFrame(animate);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'camvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","check","canvasHeight","canvasWidht","camera","controls","scene","renderer","light","constructor","THREE","color","OrbitControl","autoRotate","cameraPosition","console","log","x","ans","supportAndCnvsSize","canvas","height","width","init","addToScene","setControls","autoRotateSpeed","animate","render","e","document","querySelector","checking","status","ext","Renderer","Scene","Camera","Light","target","set","update","add","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\nimport check from './SupportThreeCheck.js'\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nexport let camera\nlet controls, scene, renderer, light;\n\n\nexport default class{\n    constructor(THREE, color, OrbitControl, autoRotate, cameraPosition=false) {\n        console.log(cameraPosition.x)\n        const ans = this.supportAndCnvsSize();\n        const canvas = ans.canvas;\n        let height = ans.height;\n        let width = ans.width;\n        try{\n            this.init(THREE, canvas, color, width, height);\n            this.addToScene(THREE);\n            if(OrbitControl!=false){\n                this.setControls(OrbitControl, canvas)\n                if(autoRotate){\n                    controls.autoRotate = autoRotate\n                    controls.autoRotateSpeed = 2;\n                }\n                animate()\n            }\n            else{\n                renderer.render(scene, camera);\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"constructor\", e, \"canvas\")\n        }\n    }\n\n    supportAndCnvsSize(){\n        try{\n            const canvas = document.querySelector(\"#canvas\");\n            canvas.width = canvasWidht();\n            canvas.height = canvasHeight();\n            const checking = check(canvas);\n            if(checking.status == false){\n                errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n            }\n            else{   \n                return {canvas: canvas, width: canvas.width, height: canvas.height}\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n        }\n        return false;\n    }\n    init(THREE, canvas, color, width, height){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            light = this.Light(THREE);\n        }\n        catch(e){\n            errorHandler('Rendering', 'init', e, 'canvas')\n        }\n    }\n\n    setControls(OrbitControl, canvas){\n        controls = new OrbitControl(camera, canvas)\n        controls.target.set(0, 0, 0);\n        controls.update();\n    }\n    addToScene(THREE){\n        try{\n            scene.add(Loader(THREE))\n            scene.add(light)\n        }\n        catch(e){\n            errorHandler('Rendering', 'addToScene', e, 'canvas')\n        }\n    }\n\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}\n\nfunction animate(){\n    try{\n        controls.update();\n        render();\n        requestAnimationFrame( animate );\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'camvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}"]},"metadata":{},"sourceType":"module"}