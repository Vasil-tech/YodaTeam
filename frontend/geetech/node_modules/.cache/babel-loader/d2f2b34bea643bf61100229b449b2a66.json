{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nlet camera, controls, scene, renderer, light;\nexport default class {\n  constructor(canvas, width, height, THREE, color, OrbitControl, autoRotate) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      if (this.init(THREE, canvas, color, width, height)) {\n        if (OrbitControl != false) {\n          if (autoRotate != false) {\n            animate(true);\n          }\n        } else {\n          animate(false);\n        }\n      }\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  init(THREE, canvas, color, width, height) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      light = this.Light(THREE);\n      return true;\n    } catch (e) {\n      errorHandler('Rendering', 'init', e, 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  } // draw(canvas, width, height, THREE, color, OrbitControl){\n  //     try{\n  //         renderer = this.Renderer(canvas, THREE);\n  //         scene = this.Scene(THREE, color);\n  //         camera = this.Camera(width, height, THREE);\n  //         let light = this.Light(THREE);\n  //         if(OrbitControl != false){\n  //             try{\n  //                 controls = new OrbitControl(camera, canvas)\n  //                 controls.target.set(0, 0, 0);\n  //                 controls.update();\n  //                 scene.add(Loader(THREE));\n  //                 scene.add(light)\n  //                 return true;\n  //             }\n  //             catch(e){\n  //                 errorHandler('Rendering', 'draw_3', e, 'canvas');\n  //             }\n  //         }\n  //         else{\n  //             try{\n  //                 scene.add(Loader(THREE));\n  //                 scene.add(light)\n  //                 renderer.render(scene, camera);\n  //                 return false\n  //             }\n  //             catch(e){\n  //                 errorHandler('Rendering', 'draw_2', e, 'canvas');\n  //             }\n  //         }\n  //     }\n  //     catch(e){\n  //         errorHandler('Rendering', 'draw_1', e, 'canvas');\n  //     }\n  // }\n  // // Controls(camera, canvas, OrbitControl){\n  // //     return controls\n  // // }\n\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}\n\nfunction animate(autoRotate) {\n  try {\n    controls.autoRotate = autoRotate;\n    controls.update();\n    render();\n    requestAnimationFrame(animate);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'camvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","camera","controls","scene","renderer","light","constructor","canvas","width","height","THREE","color","OrbitControl","autoRotate","setCanvasSize","init","animate","Renderer","Scene","Camera","Light","e","AmbientLight","PerspectiveCamera","position","set","background","Color","rend","WebGLRenderer","update","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nlet camera, controls, scene, renderer, light;\n\n\nexport default class{\n    constructor(canvas, width, height, THREE, color, OrbitControl, autoRotate) {\n        if(this.setCanvasSize(canvas, width, height)){\n            if(this.init(THREE, canvas, color, width, height)){\n                if(OrbitControl!=false){\n                    if(autoRotate!=false){\n                        animate(true)\n                    }\n                }else{\n                    animate(false)\n                }\n            }\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    init(THREE, canvas, color, width, height){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            light = this.Light(THREE);\n            return true;\n        }\n        catch(e){\n            errorHandler('Rendering', 'init', e, 'canvas')\n        }\n    }\n\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n\n    // draw(canvas, width, height, THREE, color, OrbitControl){\n    //     try{\n    //         renderer = this.Renderer(canvas, THREE);\n    //         scene = this.Scene(THREE, color);\n    //         camera = this.Camera(width, height, THREE);\n    //         let light = this.Light(THREE);\n    //         if(OrbitControl != false){\n    //             try{\n    //                 controls = new OrbitControl(camera, canvas)\n    //                 controls.target.set(0, 0, 0);\n    //                 controls.update();\n    //                 scene.add(Loader(THREE));\n    //                 scene.add(light)\n    //                 return true;\n    //             }\n    //             catch(e){\n    //                 errorHandler('Rendering', 'draw_3', e, 'canvas');\n    //             }\n    //         }\n    //         else{\n    //             try{\n\n    //                 scene.add(Loader(THREE));\n    //                 scene.add(light)\n    //                 renderer.render(scene, camera);\n    //                 return false\n    //             }\n    //             catch(e){\n    //                 errorHandler('Rendering', 'draw_2', e, 'canvas');\n    //             }\n    //         }\n    //     }\n    //     catch(e){\n    //         errorHandler('Rendering', 'draw_1', e, 'canvas');\n    //     }\n    // }\n    // // Controls(camera, canvas, OrbitControl){\n        \n    // //     return controls\n    // // }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}\n\nfunction animate(autoRotate){\n    try{\n        controls.autoRotate = autoRotate\n        controls.update();\n        render();\n        requestAnimationFrame( animate );\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'camvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}"]},"metadata":{},"sourceType":"module"}