{"ast":null,"code":"import loader from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nexport default class {\n  constructor(canvas, width, height, THREE) {\n    this.setCanvasSize(canvas, width, height);\n    this.draw(canvas, width, height, THREE); // if(this.setCanvasSize(canvas, width, height)){\n    //     this.draw(canvas, width, height, THREE);\n    // }\n    // else{\n    //     errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    // }\n  } // setCanvasSize(canvas, width, height){\n  //     try{\n  //         canvas.setAttribute(\"width\", width);\n  //         canvas.setAttribute(\"height\", height);\n  //         return true;\n  //     }\n  //     catch(e){\n  //         return e;\n  //     }\n  // }\n\n\n  draw(canvas, width, height, THREE) {\n    try {\n      let renderer = this.Renderer(canvas, THREE);\n      let scene = this.Scene(THREE);\n      let camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      try {\n        let ldr = new loader(THREE);\n\n        try {\n          scene.add(light, ldr);\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } catch (e) {\n        errorHandler('Rendering', 'draw_2', e, 'canvas');\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color('black');\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["loader","errorHandler","constructor","canvas","width","height","THREE","setCanvasSize","draw","renderer","Renderer","scene","Scene","camera","Camera","light","Light","ldr","add","render","e","AmbientLight","PerspectiveCamera","position","set","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import loader from './Loader.js'\nimport errorHandler from '../errorHandler.js'\n\nexport default class{\n    constructor(canvas, width, height, THREE) {\n        this.setCanvasSize(canvas, width, height)\n        this.draw(canvas, width, height, THREE);\n        // if(this.setCanvasSize(canvas, width, height)){\n        //     this.draw(canvas, width, height, THREE);\n        // }\n        // else{\n        //     errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        // }\n    }\n\n    // setCanvasSize(canvas, width, height){\n    //     try{\n    //         canvas.setAttribute(\"width\", width);\n    //         canvas.setAttribute(\"height\", height);\n    //         return true;\n    //     }\n    //     catch(e){\n    //         return e;\n    //     }\n    // }\n\n    draw(canvas, width, height, THREE){\n        try{\n            let renderer = this.Renderer(canvas, THREE);\n            let scene = this.Scene(THREE);\n            let camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            try{\n                let ldr = new loader(THREE);\n                try{\n                    scene.add(light, ldr);\n                    renderer.render(scene, camera);\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            catch(e){\n                errorHandler('Rendering', 'draw_2', e, 'canvas');\n            }\n\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color('black');\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}