{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nexport default class {\n  constructor(canvas, width, height, THREE, color, OrbitControl) {\n    if (this.setCanvasSize(canvas, width, height)) {\n      let arr = this.draw(canvas, width, height, THREE, color, OrbitControl);\n      this.animate(arr);\n    } else {\n      errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    }\n  }\n\n  setCanvasSize(canvas, width, height) {\n    try {\n      canvas.width = width;\n      canvas.height = height;\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n\n  animate(data) {\n    let controls = data.controls;\n    controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n\n    this.render(data.scene, data.camera);\n    requestAnimationFrame(this.animate());\n  }\n\n  render(scene, camera) {\n    this.renderer.render(scene, camera);\n  }\n\n  draw(canvas, width, height, THREE, color, OrbitControl) {\n    try {\n      let renderer = this.Renderer(canvas, THREE);\n      let scene = this.Scene(THREE, color);\n      let camera = this.Camera(width, height, THREE);\n      let light = this.Light(THREE);\n\n      if (OrbitControl != false) {\n        try {\n          const controls = new OrbitControl(camera, canvas);\n          controls.target.set(0, 0, 0);\n          controls.update();\n          scene.add(Loader(THREE));\n          scene.add(light);\n          renderer.render(scene, camera), OrbitControl;\n          return {\n            controls,\n            scene,\n            camera\n          };\n        } catch (e) {\n          errorHandler('Rendering', 'draw_3', e, 'canvas');\n        }\n      } else {\n        try {\n          scene.add(Loader(THREE));\n          scene.add(light);\n          renderer.render(scene, camera);\n        } catch (e) {\n          errorHandler('Rendering', 'draw_2', e, 'canvas');\n        }\n      }\n    } catch (e) {\n      errorHandler('Rendering', 'draw_1', e, 'canvas');\n    }\n  } // Controls(camera, canvas, OrbitControl){\n  //     return controls\n  // }\n\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","constructor","canvas","width","height","THREE","color","OrbitControl","setCanvasSize","arr","draw","animate","e","data","controls","update","render","scene","camera","requestAnimationFrame","renderer","Renderer","Scene","Camera","light","Light","target","set","add","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\n\nexport default class{\n    constructor(canvas, width, height, THREE, color, OrbitControl) {\n        if(this.setCanvasSize(canvas, width, height)){\n            let arr =  this.draw(canvas, width, height, THREE, color, OrbitControl);\n            this.animate(arr);\n        }\n        else{\n            errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        }\n    }\n\n    setCanvasSize(canvas, width, height){\n        try{\n            canvas.width = width\n            canvas.height = height\n            return true;\n        }\n        catch(e){\n            return e;\n        }\n    }\n    animate(data){\n        let controls = data.controls\n\t\tcontrols.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true\n\t\tthis.render(data.scene, data.camera);\n        requestAnimationFrame( this.animate() );\n\n    }\n    render(scene, camera){\n        this.renderer.render(scene, camera)\n    }\n    draw(canvas, width, height, THREE, color, OrbitControl){\n        try{\n            let renderer = this.Renderer(canvas, THREE);\n            let scene = this.Scene(THREE, color);\n            let camera = this.Camera(width, height, THREE);\n            let light = this.Light(THREE);\n            if(OrbitControl != false){\n                try{\n                    const controls = new OrbitControl(camera, canvas)\n                    controls.target.set(0, 0, 0);\n                    controls.update();\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    renderer.render(scene, camera), OrbitControl;\n                    return {controls, scene, camera};\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_3', e, 'canvas');\n                }\n            }\n            else{\n                try{\n\n                    scene.add(Loader(THREE));\n                    scene.add(light)\n                    renderer.render(scene, camera);\n                }\n                catch(e){\n                    errorHandler('Rendering', 'draw_2', e, 'canvas');\n                }\n            }\n        }\n        catch(e){\n            errorHandler('Rendering', 'draw_1', e, 'canvas');\n        }\n    }\n    // Controls(camera, canvas, OrbitControl){\n        \n    //     return controls\n    // }\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}