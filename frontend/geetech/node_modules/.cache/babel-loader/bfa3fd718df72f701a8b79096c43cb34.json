{"ast":null,"code":"let session = [];\nlet rotationStatus;\nimport threeLogic from '../scripts/Three/threeLogic.js';\nimport * as THREE from 'three';\nimport OrbitControl from 'three-orbitcontrols';\nexport default {\n  data() {\n    return {\n      color: \"black\",\n      orbValue: false\n    };\n  },\n\n  methods: {},\n  mounted: function () {},\n  beforeCreate: function () {\n    this.emitter.on(\"Rendering\", data => {\n      console.log(data.Num);\n\n      if (data.Num == 0) {\n        start3d(THREE);\n      }\n    });\n  },\n  created: function () {\n    this.emitter.on(\"SceneBackgroundColor\", color => {\n      start3d(THREE, color, this.orbValue), this.color = color;\n    });\n    this.emitter.on(\"OrbitControlStatus\", orbValue => {\n      start3d(THREE, this.color, this.orbValue = orbValue);\n    });\n    this.emitter.on(\"RotateOn\", data => {\n      start3d(THREE, this.color, this.orbValue, data);\n    });\n    this.emitter.on(\"FullScreenCanvas\", data => {\n      start3d(THREE, this.color, this.orbValue, data, true);\n    });\n  }\n};\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate, fullScreen = false) {\n  try {\n    if (orbCont) {\n      rotationStatus = true;\n      session[0] = new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen); //console.log(session[0].Camera)\n    } else {\n      if (rotationStatus) {\n        console.log(session[0].rend.controls.position);\n      }\n\n      session[0] = new threeLogic(THREE, color, false, autoRotate, fullScreen);\n    }\n  } catch (e) {\n    this.emitter.emit(\"CanvasError\", {\n      'file': 'ThreeContainer',\n      'method': 'start3d',\n      'ext': e\n    });\n  }\n}","map":{"version":3,"mappings":"AASA,IAAIA,OAAM,GAAI,EAAd;AACA,IAAIC,cAAJ;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,eAAe;AACXC,MAAI,GAAE;AACF,WAAM;AACFC,WAAK,EAAE,OADL;AAEFC,cAAQ,EAAE;AAFR,KAAN;AAIH,GANU;;AAOXC,SAAO,EAAC,EAPG;AAUXC,SAAO,EAAE,YAAU,CAElB,CAZU;AAaXC,cAAY,EAAE,YAAU;AACZ,SAAKC,OAAL,CAAaC,EAAb,CAAgB,WAAhB,EAA6BP,IAAI,IAAE;AACvCQ,aAAO,CAACC,GAAR,CAAYT,IAAI,CAACU,GAAjB;;AACA,UAAGV,IAAI,CAACU,GAAL,IAAY,CAAf,EAAiB;AACbC,eAAO,CAACb,KAAD,CAAP;AACJ;AACH,KALO;AAMX,GApBU;AAqBXc,SAAO,EAAE,YAAU;AACf,SAAKN,OAAL,CAAaC,EAAb,CAAgB,sBAAhB,EAAwCN,KAAI,IAAK;AAC7CU,aAAO,CAACb,KAAD,EAAQG,KAAR,EAAe,KAAKC,QAApB,CAAP,EAAsC,KAAKD,KAAL,GAAYA,KAAlD;AACH,KAFD;AAGA,SAAKK,OAAL,CAAaC,EAAb,CAAgB,oBAAhB,EAAsCL,QAAO,IAAI;AAC7CS,aAAO,CAACb,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAL,GAAgBA,QAApC,CAAP;AACH,KAFD;AAGA,SAAKI,OAAL,CAAaC,EAAb,CAAgB,UAAhB,EAA4BP,IAAI,IAAG;AAC/BW,aAAO,CAACb,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,CAAP;AACH,KAFD;AAGA,SAAKM,OAAL,CAAaC,EAAb,CAAgB,kBAAhB,EAAoCP,IAAI,IAAE;AACtCW,aAAO,CAACb,KAAD,EAAQ,KAAKG,KAAb,EAAoB,KAAKC,QAAzB,EAAmCF,IAAnC,EAAyC,IAAzC,CAAP;AACH,KAFD;AAGJ;AAlCW,CAAf;;AAqCA,SAASW,OAAT,CAAiBb,KAAjB,EAAwBG,KAAI,GAAI,OAAhC,EAAyCY,OAAzC,EAAkDC,UAAlD,EAA8DC,UAAU,GAAC,KAAzE,EAA+E;AAC3E,MAAG;AACC,QAAGF,OAAH,EAAW;AACPjB,oBAAa,GAAI,IAAjB;AACAD,aAAO,CAAC,CAAD,CAAP,GAAa,IAAIE,UAAJ,CAAeC,KAAf,EAAsBG,KAAtB,EAA6BF,YAA7B,EAA2Ce,UAA3C,EAAuDC,UAAvD,CAAb,CAFO,CAGP;AACJ,KAJA,MAKI;AACA,UAAGnB,cAAH,EAAkB;AACdY,eAAO,CAACC,GAAR,CAAYd,OAAO,CAAC,CAAD,CAAP,CAAWqB,IAAX,CAAgBC,QAAhB,CAAyBC,QAArC;AACJ;;AACIvB,aAAO,CAAC,CAAD,CAAP,GAAa,IAAIE,UAAJ,CAAeC,KAAf,EAAsBG,KAAtB,EAA6B,KAA7B,EAAoCa,UAApC,EAAgDC,UAAhD,CAAb;AACJ;AACJ,GAZJ,CAaA,OAAMI,CAAN,EAAQ;AACJ,SAAKb,OAAL,CAAac,IAAb,CAAkB,aAAlB,EAAiC;AAAC,cAAQ,gBAAT;AAA2B,gBAAS,SAApC;AAA+C,aAAMD;AAArD,KAAjC;AAEJ;AACJ","names":["session","rotationStatus","threeLogic","THREE","OrbitControl","data","color","orbValue","methods","mounted","beforeCreate","emitter","on","console","log","Num","start3d","created","orbCont","autoRotate","fullScreen","rend","controls","position","e","emit"],"sourceRoot":"","sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/WorkAreaContainer/ThreeContainer.vue"],"sourcesContent":["<template>\n    <div class=\"threeContainerRoot\">\n        <div class=\"canvasContainer\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nlet session = [];\nlet rotationStatus;\nimport threeLogic from '../scripts/Three/threeLogic.js'\nimport * as THREE from 'three'\nimport OrbitControl from 'three-orbitcontrols'\nexport default {\n    data(){\n        return{\n            color: \"black\",\n            orbValue: false,\n        }\n    },\n    methods:{\n\n    },\n    mounted: function(){\n        \n    },\n    beforeCreate: function(){\n                this.emitter.on(\"Rendering\", data=>{\n            console.log(data.Num)\n            if(data.Num == 0){\n                start3d(THREE)\n            }\n        })\n    },\n    created: function(){\n        this.emitter.on(\"SceneBackgroundColor\", color => {\n            start3d(THREE, color, this.orbValue), this.color= color\n        })\n        this.emitter.on(\"OrbitControlStatus\", orbValue =>{\n            start3d(THREE, this.color, this.orbValue = orbValue)\n        })\n        this.emitter.on(\"RotateOn\", data=> {\n            start3d(THREE, this.color, this.orbValue, data)\n        })\n        this.emitter.on(\"FullScreenCanvas\", data=>{\n            start3d(THREE, this.color, this.orbValue, data, true)\n        })\n    }\n}\n\nfunction start3d(THREE, color = 'black', orbCont, autoRotate, fullScreen=false){\n    try{\n        if(orbCont){\n            rotationStatus = true;\n            session[0] = new threeLogic(THREE, color, OrbitControl, autoRotate, fullScreen)\n            //console.log(session[0].Camera)\n        }\n        else{\n            if(rotationStatus){\n                console.log(session[0].rend.controls.position)\n            }\n                session[0] = new threeLogic(THREE, color, false, autoRotate, fullScreen)\n            }\n        }\n    catch(e){\n        this.emitter.emit(\"CanvasError\", {'file': 'ThreeContainer', 'method':'start3d', 'ext':e})\n\n    }\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}