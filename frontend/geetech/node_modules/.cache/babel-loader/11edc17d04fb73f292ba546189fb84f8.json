{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nimport check from './SupportThreeCheck.js';\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nexport let camera, controls;\nlet scene, renderer, light;\nexport default class {\n  constructor(THREE, color, OrbitControl, autoRotate, cameraPosition, controlsObject = null) {\n    const ans = this.supportAndCnvsSize();\n    const canvas = ans.canvas;\n    let height = ans.height;\n    let width = ans.width;\n\n    try {\n      this.init(THREE, canvas, color, width, height, cameraPosition);\n      this.addToScene(THREE);\n\n      if (OrbitControl !== false) {\n        this.setControls(OrbitControl, canvas);\n\n        if (autoRotate) {\n          controls.autoRotate = autoRotate;\n          controls.autoRotateSpeed = 2;\n        }\n\n        animate();\n      } else {\n        renderer.render(scene, camera);\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"constructor\", e, \"canvas\");\n    }\n  }\n\n  supportAndCnvsSize() {\n    try {\n      const canvas = document.querySelector(\"#canvas\");\n      canvas.width = canvasWidht();\n      canvas.height = canvasHeight();\n      const checking = check(canvas);\n\n      if (checking.status == false) {\n        errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n      } else {\n        return {\n          canvas: canvas,\n          width: canvas.width,\n          height: canvas.height\n        };\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n    }\n\n    return false;\n  }\n\n  init(THREE, canvas, color, width, height, cameraPosition) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE, cameraPosition);\n      light = this.Light(THREE);\n    } catch (e) {\n      errorHandler('Rendering', 'init', e, 'canvas');\n    }\n  }\n\n  setControls(OrbitControl, canvas) {\n    controls = new OrbitControl(camera, canvas);\n    controls.target.set(0, 0, 0);\n    controls.update();\n  }\n\n  addToScene(THREE) {\n    try {\n      scene.add(Loader(THREE));\n      console.log(scene);\n      scene.add(light);\n    } catch (e) {\n      errorHandler('Rendering', 'addToScene', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE, cameraPosition) {\n    try {\n      const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);\n      console.log(cameraPosition);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}\n\nfunction animate() {\n  try {\n    controls.update();\n    render();\n    requestAnimationFrame(animate);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'canvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","check","canvasHeight","canvasWidht","camera","controls","scene","renderer","light","constructor","THREE","color","OrbitControl","autoRotate","cameraPosition","controlsObject","ans","supportAndCnvsSize","canvas","height","width","init","addToScene","setControls","autoRotateSpeed","animate","render","e","document","querySelector","checking","status","ext","Renderer","Scene","Camera","Light","target","set","update","add","console","log","AmbientLight","PerspectiveCamera","position","x","y","z","background","Color","rend","WebGLRenderer","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\nimport check from './SupportThreeCheck.js'\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nexport let camera, controls\nlet  scene, renderer, light;\n\n\nexport default class{\n    constructor(THREE, color, OrbitControl, autoRotate, cameraPosition, controlsObject = null) {\n        const ans = this.supportAndCnvsSize();\n        const canvas = ans.canvas;\n        let height = ans.height;\n        let width = ans.width;\n        try{\n            this.init(THREE, canvas, color, width, height, cameraPosition);\n            this.addToScene(THREE);\n            if(OrbitControl!== false){\n                this.setControls(OrbitControl, canvas)\n                if(autoRotate){\n                    controls.autoRotate = autoRotate\n                    controls.autoRotateSpeed = 2;\n                }\n                animate()\n            }\n            else {\n                renderer.render(scene, camera);\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"constructor\", e, \"canvas\")\n        }\n    }\n\n    supportAndCnvsSize(){\n        try{\n            const canvas = document.querySelector(\"#canvas\");\n            canvas.width = canvasWidht();\n            canvas.height = canvasHeight();\n            const checking = check(canvas);\n            if(checking.status == false){\n                errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n            }\n            else{   \n                return {canvas: canvas, width: canvas.width, height: canvas.height}\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n        }\n        return false;\n    }\n    init(THREE, canvas, color, width, height, cameraPosition){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE, cameraPosition);\n            light = this.Light(THREE);\n        }\n        catch(e){\n            errorHandler('Rendering', 'init', e, 'canvas')\n        }\n    }\n\n    setControls(OrbitControl, canvas){\n        controls = new OrbitControl(camera, canvas)\n        controls.target.set(0, 0, 0);\n        controls.update();\n    }\n    addToScene(THREE){\n        try{\n            scene.add(Loader(THREE))\n            console.log(scene)\n            scene.add(light)\n        }\n        catch(e){\n            errorHandler('Rendering', 'addToScene', e, 'canvas')\n        }\n    }\n\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE, cameraPosition){\n        try{\n            const camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);\n            console.log(cameraPosition)\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}\n\nfunction animate(){\n    try{\n        controls.update();\n        render();\n        requestAnimationFrame(animate);\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'canvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}"]},"metadata":{},"sourceType":"module"}