{"ast":null,"code":"import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js';\nimport check from './SupportThreeCheck.js';\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nlet camera, controls, scene, renderer, light;\nexport default class {\n  constructor(THREE, color, OrbitControl, autoRotate) {\n    const ans = this.supportAndCnvsSize();\n    const canvas = ans.canvas;\n    let height = ans.height;\n    let width = ans.width;\n    canvas.width = width;\n    canvas.height = height;\n\n    try {\n      this.init(THREE, canvas, color, width, height);\n      this.addToScene(THREE);\n\n      if (OrbitControl != false) {\n        this.setControls(OrbitControl, canvas);\n\n        if (autoRotate) {\n          controls.autoRotateSpeed = 2;\n          controls.autoRotate = autoRotate;\n        }\n\n        animate();\n      } else {\n        renderer.render(scene, camera);\n        console.log(scene);\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"constructor\", e, \"canvas\");\n    } //     if(this.init(THREE, canvas, color, width, height)){\n    //         this.addToScene(THREE)\n    //         if(OrbitControl!=false){\n    //             this.setControls(OrbitControl, canvas)\n    //             controls.autoRotateSpeed = 2;\n    //             controls.autoRotate = autoRotate\n    //             console.log(controls)\n    //             animate()\n    //         }\n    //     }\n    // else{\n    //     errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n    // }\n\n  }\n\n  supportAndCnvsSize() {\n    try {\n      const canvas = document.querySelector(\"#canvas\");\n      const checking = check(canvas);\n\n      if (checking.status == false) {\n        errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n      } else {\n        try {\n          canvas.width = canvasWidht();\n          canvas.height = canvasHeight();\n          return {\n            canvas: canvas,\n            width: canvas.width,\n            height: canvas.height\n          };\n        } catch (e) {\n          errorHandler(\"Rendering\", \"supportAndCnvsSize_2\", e, \"canvas\");\n        }\n      }\n    } catch (e) {\n      errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n    }\n\n    return false;\n  }\n\n  init(THREE, canvas, color, width, height) {\n    try {\n      renderer = this.Renderer(canvas, THREE);\n      scene = this.Scene(THREE, color);\n      camera = this.Camera(width, height, THREE);\n      light = this.Light(THREE);\n    } catch (e) {\n      errorHandler('Rendering', 'init', e, 'canvas');\n    }\n  }\n\n  setControls(OrbitControl, canvas) {\n    controls = new OrbitControl(camera, canvas);\n    controls.target.set(0, 0, 0);\n    controls.update();\n  }\n\n  addToScene(THREE) {\n    try {\n      scene.add(Loader(THREE));\n      scene.add(light);\n    } catch (e) {\n      errorHandler('Rendering', 'addToScene', e, 'canvas');\n    }\n  }\n\n  Light(THREE) {\n    try {\n      let light = new THREE.AmbientLight(0xffffff);\n      return light;\n    } catch (e) {\n      errorHandler('Rendering', 'Light', e, 'canvas');\n    }\n  }\n\n  Camera(width, height, THREE) {\n    try {\n      let camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 3000);\n      camera.position.set(0, 0, 1000);\n      return camera;\n    } catch (e) {\n      errorHandler('Rendering', 'Camera', e, 'canvas');\n    }\n  }\n\n  Scene(THREE, color) {\n    try {\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(color);\n      return scene;\n    } catch (e) {\n      errorHandler('Rendering', 'Scene', e, 'canvas');\n    }\n  }\n\n  Renderer(canvas, THREE) {\n    try {\n      const rend = new THREE.WebGLRenderer({\n        canvas\n      });\n      return rend;\n    } catch (e) {\n      errorHandler('Rendering', 'Renderer', e, 'canvas');\n    }\n  }\n\n}\n\nfunction animate() {\n  try {\n    controls.update();\n    render();\n    requestAnimationFrame(animate);\n  } catch (e) {\n    errorHandler('Rendering', 'animate', e, 'camvas');\n  }\n}\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/neuromancer/projects/YodaTeam/frontend/geetech/src/components/Blocks/scripts/Three/Renderering.js"],"names":["Loader","errorHandler","check","canvasHeight","canvasWidht","camera","controls","scene","renderer","light","constructor","THREE","color","OrbitControl","autoRotate","ans","supportAndCnvsSize","canvas","height","width","init","addToScene","setControls","autoRotateSpeed","animate","render","console","log","e","document","querySelector","checking","status","ext","Renderer","Scene","Camera","Light","target","set","update","add","AmbientLight","PerspectiveCamera","position","background","Color","rend","WebGLRenderer","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { Loader } from './Loader.js';\nimport errorHandler from '../errorHandler.js'\nimport check from './SupportThreeCheck.js'\nimport { canvasHeight } from '../bus.js';\nimport { canvasWidht } from '../bus.js';\nlet camera, controls, scene, renderer, light;\n\n\nexport default class{\n    constructor(THREE, color, OrbitControl, autoRotate) {\n        const ans = this.supportAndCnvsSize();\n        const canvas = ans.canvas;\n        let height = ans.height;\n        let width = ans.width;\n        canvas.width = width\n        canvas.height = height\n        try{\n            this.init(THREE, canvas, color, width, height);\n            this.addToScene(THREE);\n            if(OrbitControl!=false){\n                this.setControls(OrbitControl, canvas)\n                if(autoRotate){\n                    controls.autoRotateSpeed = 2;\n                    controls.autoRotate = autoRotate\n                }\n                animate()\n            }\n            else{\n                renderer.render(scene, camera);\n                console.log(scene)\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"constructor\", e, \"canvas\")\n        }\n\n        //     if(this.init(THREE, canvas, color, width, height)){\n        //         this.addToScene(THREE)\n        //         if(OrbitControl!=false){\n        //             this.setControls(OrbitControl, canvas)\n        //             controls.autoRotateSpeed = 2;\n        //             controls.autoRotate = autoRotate\n        //             console.log(controls)\n        //             animate()\n        //         }\n        //     }\n        \n        // else{\n        //     errorHandler('Rendering', 'constructor', 'setCanvasSize', 'canvas');\n        // }\n    }\n    supportAndCnvsSize(){\n        try{\n            const canvas = document.querySelector(\"#canvas\");\n            const checking = check(canvas);\n            if(checking.status == false){\n                errorHandler('threeLogic', 'checking', checking.ext, 'canvas');\n            }\n            else{\n                try{\n                    canvas.width = canvasWidht();\n                    canvas.height = canvasHeight();\n                    return {canvas: canvas, width: canvas.width, height: canvas.height}\n                }\n                catch(e){\n                    errorHandler(\"Rendering\", \"supportAndCnvsSize_2\", e, \"canvas\");\n                }\n            }\n        }\n        catch(e){\n            errorHandler(\"Rendering\", \"supportAndCnvsSize_1\", e, \"canvas\");\n        }\n        return false;\n    }\n    init(THREE, canvas, color, width, height){\n        try{\n            renderer = this.Renderer(canvas, THREE);\n            scene = this.Scene(THREE, color);\n            camera = this.Camera(width, height, THREE);\n            light = this.Light(THREE);\n        }\n        catch(e){\n            errorHandler('Rendering', 'init', e, 'canvas')\n        }\n    }\n\n    setControls(OrbitControl, canvas){\n        controls = new OrbitControl(camera, canvas)\n        controls.target.set(0, 0, 0);\n        controls.update();\n    }\n    addToScene(THREE){\n        try{\n            scene.add(Loader(THREE))\n            scene.add(light)\n        }\n        catch(e){\n            errorHandler('Rendering', 'addToScene', e, 'canvas')\n        }\n    }\n\n    Light(THREE){\n        try{\n            let light = new THREE.AmbientLight(0xffffff);\n            return light;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Light', e, 'canvas');\n        }\n    }\n    Camera(width, height, THREE){\n        try{\n            let camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 3000);\n            camera.position.set(0, 0, 1000);\n            return camera;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Camera', e, 'canvas');\n        }\n    }\n    Scene(THREE, color){\n        try{\n            const scene = new THREE.Scene;\n            scene.background = new THREE.Color(color);\n            return scene;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Scene', e, 'canvas');\n        }\n    }\n    Renderer(canvas, THREE){\n        try{\n            const rend =  new THREE.WebGLRenderer({canvas});\n            return rend;\n        }\n        catch(e){\n            errorHandler('Rendering', 'Renderer', e, 'canvas');\n        }\n    }\n}\n\nfunction animate(){\n    try{\n        controls.update();\n        render();\n        requestAnimationFrame( animate );\n    }\n    catch(e){\n        errorHandler('Rendering', 'animate', e, 'camvas')\n    }\n}\nfunction render(){\n    renderer.render(scene, camera)\n}"]},"metadata":{},"sourceType":"module"}